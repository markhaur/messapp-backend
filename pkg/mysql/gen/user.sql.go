// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package gen

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users(
    name, password, designation, employee_id, is_admin, created_at
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type CreateUserParams struct {
	Name        string
	Password    string
	Designation string
	EmployeeID  string
	IsAdmin     int32
	CreatedAt   time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Name,
		arg.Password,
		arg.Designation,
		arg.EmployeeID,
		arg.IsAdmin,
		arg.CreatedAt,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
where id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmployeeID = `-- name: GetUserByEmployeeID :one
SELECT id, name, password, designation, employee_id, is_admin, created_at FROM users
WHERE employee_id = ? LIMIT 1
`

func (q *Queries) GetUserByEmployeeID(ctx context.Context, employeeID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmployeeID, employeeID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Designation,
		&i.EmployeeID,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, password, designation, employee_id, is_admin, created_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Designation,
		&i.EmployeeID,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, password, designation, employee_id, is_admin, created_at FROM users
ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Password,
			&i.Designation,
			&i.EmployeeID,
			&i.IsAdmin,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET password = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Password string
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Password, arg.ID)
	return err
}
