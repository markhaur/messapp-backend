// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: reservation.sql

package gen

import (
	"context"
	"database/sql"
	"time"
)

const createReservation = `-- name: CreateReservation :execresult
INSERT INTO reservations (
    user_id, reservation_time, type, no_of_guests, created_at
) VALUES (
    ?, ?, ?, ?, ?
)
`

type CreateReservationParams struct {
	UserID          int64
	ReservationTime time.Time
	Type            int64
	NoOfGuests      int64
	CreatedAt       time.Time
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createReservation,
		arg.UserID,
		arg.ReservationTime,
		arg.Type,
		arg.NoOfGuests,
		arg.CreatedAt,
	)
}

const deleteReservation = `-- name: DeleteReservation :exec
DELETE FROM reservations
where id = ?
`

func (q *Queries) DeleteReservation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReservation, id)
	return err
}

const getReservationByID = `-- name: GetReservationByID :one
SELECT reservations.id, reservations.user_id, reservations.reservation_time, reservations.type, reservations.no_of_guests, reservations.created_at, users.name FROM reservations
INNER JOIN users ON reservations.user_id = users.id
WHERE reservations.id = ? LIMIT 1
`

type GetReservationByIDRow struct {
	ID              int64
	UserID          int64
	ReservationTime time.Time
	Type            int64
	NoOfGuests      int64
	CreatedAt       time.Time
	Name            string
}

func (q *Queries) GetReservationByID(ctx context.Context, id int64) (GetReservationByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getReservationByID, id)
	var i GetReservationByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ReservationTime,
		&i.Type,
		&i.NoOfGuests,
		&i.CreatedAt,
		&i.Name,
	)
	return i, err
}

const getReservationsByDate = `-- name: GetReservationsByDate :many
SELECT reservations.id, reservations.user_id, reservations.reservation_time, reservations.type, reservations.no_of_guests, reservations.created_at, users.name FROM reservations
INNER JOIN users ON reservations.user_id = users.id
WHERE DATE(reservation_time) = DATE(?)
`

type GetReservationsByDateRow struct {
	ID              int64
	UserID          int64
	ReservationTime time.Time
	Type            int64
	NoOfGuests      int64
	CreatedAt       time.Time
	Name            string
}

func (q *Queries) GetReservationsByDate(ctx context.Context, date time.Time) ([]GetReservationsByDateRow, error) {
	rows, err := q.db.QueryContext(ctx, getReservationsByDate, date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetReservationsByDateRow{}
	for rows.Next() {
		var i GetReservationsByDateRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ReservationTime,
			&i.Type,
			&i.NoOfGuests,
			&i.CreatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReservationsByEmployeeID = `-- name: GetReservationsByEmployeeID :many
SELECT reservations.id, reservations.user_id, reservations.reservation_time, reservations.type, reservations.no_of_guests, reservations.created_at, users.name FROM reservations
INNER JOIN users ON reservations.user_id = users.id
WHERE user_id = ?
`

type GetReservationsByEmployeeIDRow struct {
	ID              int64
	UserID          int64
	ReservationTime time.Time
	Type            int64
	NoOfGuests      int64
	CreatedAt       time.Time
	Name            string
}

func (q *Queries) GetReservationsByEmployeeID(ctx context.Context, userID int64) ([]GetReservationsByEmployeeIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getReservationsByEmployeeID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetReservationsByEmployeeIDRow{}
	for rows.Next() {
		var i GetReservationsByEmployeeIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ReservationTime,
			&i.Type,
			&i.NoOfGuests,
			&i.CreatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listReservations = `-- name: ListReservations :many
SELECT reservations.id, reservations.user_id, reservations.reservation_time, reservations.type, reservations.no_of_guests, reservations.created_at, users.name FROM reservations
INNER JOIN users ON reservations.user_id = users.id
ORDER BY reservation_time desc
`

type ListReservationsRow struct {
	ID              int64
	UserID          int64
	ReservationTime time.Time
	Type            int64
	NoOfGuests      int64
	CreatedAt       time.Time
	Name            string
}

func (q *Queries) ListReservations(ctx context.Context) ([]ListReservationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listReservations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListReservationsRow{}
	for rows.Next() {
		var i ListReservationsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ReservationTime,
			&i.Type,
			&i.NoOfGuests,
			&i.CreatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReservation = `-- name: UpdateReservation :exec
UPDATE reservations SET no_of_guests = ?
WHERE id = ?
`

type UpdateReservationParams struct {
	NoOfGuests int64
	ID         int64
}

func (q *Queries) UpdateReservation(ctx context.Context, arg UpdateReservationParams) error {
	_, err := q.db.ExecContext(ctx, updateReservation, arg.NoOfGuests, arg.ID)
	return err
}
